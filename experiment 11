#include<iostream>

using namespace std;

class vehicle
{
private:
	int maxspeed;
	float weight;
	float price;

public:
	vehicle()
	{
		cout << "默认 the vehicle has been constructed" << endl;
	}//默认构造函数

	vehicle(int maxv, float g, float p) :maxspeed(maxv), weight(g), price(p)
	{
		cout << "the vehicle has been constructed" << endl;
	}//参数值的构造函数

	//复制构造函数
	vehicle(vehicle& cp)
	{
		cout << "the vehicle has been copied" << endl;
		maxspeed = cp.maxspeed;
		weight = cp.weight;
		price = cp.price;
	}

	//析构函数
	~vehicle()
	{
		cout << "the vehicle has been deconstructed" << endl;
	}

	virtual void print()
	{
		cout << "the maxspeed is: " << maxspeed << endl;
		cout << "the weight is: " << weight << endl;
		cout << "the price is: " << price << endl;
	}

	virtual void run()
	{
		cout << "the vehicle is running!" << endl;
	}

	virtual void stop()
	{
		cout << "the vehicle has stopped" << endl;
	}
};

class motorcar :virtual public vehicle
{
private:
	float length;
	float height;
	float gas;
public:
	//默认构造函数
	motorcar()
	{
		cout << "默认 the motorcar has been constructed" << endl;
	}

	//带参数的构造函数
	motorcar(int maxv, float weigh, float nprice, float nlen, float nheight, float ngas) :vehicle(maxv, weigh, nprice),
		length(nlen), height(nheight), gas(ngas)
	{
		cout << "the motorcar has been constructed" << endl;
	}

	//虚基类构造函数
	motorcar(int maxspeed, float wei, float npri) :vehicle(maxspeed, wei, npri) {}

	//复制构造函数
	motorcar(motorcar& cpmotor) :vehicle(cpmotor)
	{
		length = cpmotor.length;
		height = cpmotor.height;
		gas = cpmotor.gas;
		cout << "the motorcar has been copied" << endl;
	}

	//析构函数
	~motorcar()
	{
		cout << "the motorcar has been deconstructed" << endl;
	}

	void print()
	{
		vehicle::print();
		cout << "the length is: " << length << endl;
		cout << "the height is: " << height << endl;
		cout << "the gas is: " << gas << endl;
	}

	void run()
	{
		cout << "the motorcar is running" << endl;
	}

	void stop()
	{
		cout << "the motorcar has stopped" << endl;
	}
};

class bicycle :virtual public vehicle
{
private:
	string material;
public:
	//默认构造函数
	bicycle()
	{
		cout << "The bicycle has been constructed by default constructor" << endl;
	}

	//带参数的构造函数
	bicycle(int maxv, float weigh, float price, string nm) :vehicle(maxv, weigh, price),
		material(nm)
	{
		cout << "The bicycle has been constructed" << endl;
	}

	//虚基类构造函数
	bicycle(int maxspeed, float wei, float npri) :vehicle(maxspeed, wei, npri) {}

	//复制构造函数
	bicycle(bicycle& cpby) :vehicle(cpby)
	{
		material = cpby.material;
		cout << "the bicycle has been copied" << endl;
	}

	//析构函数
	~bicycle()
	{
		cout << "the bycicle has been deconstructed" << endl;
	}

	void print()
	{
		vehicle::print();
		cout << "the material of the bicycle is: " << material << endl;
	}

	void run()
	{
		cout << "the bicycle is running" << endl;
	}

	void stop()
	{
		cout << "the bicycle has stopped" << endl;
	}
};

class motorcycle :public motorcar, public bicycle
{
private:
	int power;
public:
	//默认构造函数
	motorcycle()
	{
		cout << "默认 the motorcycle has been constructed" << endl;
	}

	//参数的构造函数
	motorcycle(int maxv, int weigh, float nprice, float nlen, float nheight, float ngas, string nm, int pow) :
		vehicle(maxv, weigh, nprice),
		motorcar(maxv, weigh, nprice, nlen, nheight, ngas), bicycle(maxv, weigh, nprice, nm), power(pow)
	{
		cout << "the motorcycle has been constructed" << endl;
	}


	//复制构造函数
	motorcycle(motorcycle& cpcycle) :motorcar(cpcycle), bicycle(cpcycle)
	{
		power = cpcycle.power;
		cout << "the motorcycle has been copied" << endl;
	}

	//析构函数
	~motorcycle()
	{
		cout << "the motorcycle has been deconstructed" << endl;
	}

	void print()
	{
		motorcar::print();
		bicycle::print();
		cout << "the power is: " << power << endl;
	}

	void run()
	{
		cout << "the motorcycle is running" << endl;
	}

	void stop()
	{
		cout << "the motorcycle has stopped" << endl;
	}
};

void fun(vehicle* p)
{
	p->print();
	p->run();
	p->stop();
}

int main()
{
	vehicle* p;

	vehicle v1(270, 988.2, 1000.2);
	motorcar m1(268, 2.3, 1342.4, 3.2, 1.6, 92);
	bicycle b1(269, 2.3, 2300.3, "carbon");
	motorcycle cycle(187, 1.3, 2300, 1.2, 1.1, 94, "plastic", 5.0);

	p = &v1;
	fun(p);

	p = &m1;
	fun(p);

	p = &b1;
	fun(p);

	p = &cycle;
	fun(p);

	return 0;
}
