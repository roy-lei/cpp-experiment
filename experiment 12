#include<iostream>
#include<cassert>

using namespace std;


template<class T>
class Array 
{
private:
	T* list;
	int size;
public:
	//构造函数
	Array(int sz = 0);

	//复制构造函数
	Array(const Array<T>& a);

	//析构函数
	~Array();

	Array<T>& operator= (const Array<T>& rhs);
	T& operator[] (int i);
	const T& operator[] (int i)const;
	Array<T> operator+ (const Array<T> a2);
	Array<T> operator- (const Array<T> b2);
	operator T* ();
	operator T* ()const;

	int getsize()const;
	void resize(int sz);

	friend ostream& operator<<(ostream& out, const Array<T>& c)
	{
		for (int i = 0; i < c.size; i++)
			out << c.list[i] << " ";
		return out;
	}
};

template<class T>
Array<T>::Array(int sz)
{
	assert(sz >= 0);
	size = sz;
	list = new T[size];
}

template<class T>
Array<T>::Array(const Array<T>& a)
{
	size = a.size;
	list = new T[size];
	for (int i = 0; i < size; i++)
		list[i] = a.list[i];
}

template<class T>
Array<T>::~Array()
{
	delete[] list;
}

template<class T>
Array<T>& Array<T>::operator= (const Array<T>& rhs)
{
	if (&rhs != this) {
		if (size != rhs.size)
		{
			delete[] list;
			size = rhs.size;
			list = new T[size];
		}
		for (int i = 0; i < size; i++)
			list[i] = rhs.list[i];
	}
	return *this;
}

template<class T>
T& Array<T>::operator[] (int n)
{
	assert(n >= 0 && n <= size);
	return list[n];
}

template<class T>
const T& Array<T>::operator[] (int n) const
{
	assert(n >= 0 && n < size);
	return list[n];
}

template<class T>
Array<T> Array<T>::operator+ (const Array<T> a1)
{
	if (size != a1.size)
		return *this;
	for (int i = 0; i < size; i++)
		list[i] += a1.list[i];
	return *this;

}

template<class T>
Array<T> Array<T>::operator-(const Array<T> b1)
{
	if (size != b1.size)
		return *this;
	for (int i = 0; i < size; i++)
		list[i] -= b1.list[i];
	return *this;
}

template<class T>
Array<T>::operator T *()
{
	return list;
}

template<class T>
Array<T>::operator T* ()const
{
	return list;
}

template<class T>
int Array<T>::getsize()const
{
	return this->size;
}

template<class T>
void Array<T>::resize(int sz)
{
	assert(sz >= 0);
	if (sz == size)
		return;
	T* newlist = new T[sz];
	int n = (sz < size) ? sz : size;
	for (int i = 0; i < n; i++)
		newlist[i] = list[i];
	delete[] list;
	list = newlist;
	size = sz;
}


int main()
{
	Array<int>s1(2);
	Array<int>s2(2);
	for (int i = 0; i < 2; i++)
		cin >> s1[i];
	for (int i = 0; i < 2; i++)
		cin >> s2[i];
	cout << s1 - s2;
	return 0;
}
